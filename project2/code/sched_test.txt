#define _GNU_SOURCE
#include <stdio.h>
#include <sched.h>
#include <unistd.h>
#include <pthread.h>

void * thread_func(void * j) {
    int i, k;
    int ii = (int)j;
    for(i=0;i<3;++i) {
	printf("Thread %d is running.\n", ii);
	for(k=0; k<999999; k++){}
	// sleep(1);
    }
}

int main(){
    int result_a, result_s;

    // Set CPU affinity, 0 for current process PID
    cpu_set_t mask;
    CPU_ZERO(&mask);  // Clear set, so that it contains no CPUs.
    CPU_SET(0, &mask); // Add CPU of current process to set.
    result_a = sched_setaffinity(0, sizeof(mask), &mask);  // return 0 if success, -1 if error.
    // printf("setaffinity: %d\n", result_a);

    struct sched_param param;
    param.sched_priority = sched_get_priority_max(SCHED_FIFO);
    result_s = sched_setscheduler(0, SCHED_FIFO, &param);
    // printf("setscheduler: %d\n", result_s);

    int i;
    pthread_t threads[3];
    for(i=0; i<2; ++i) {
	pthread_create(&threads[i], NULL, thread_func, (void *)i+1);
	printf("Thread %d was created.\n", i+1);
    }
    for(i=0; i<2; ++i) {
	pthread_join(threads[i], NULL);
    }

    return 0;
}
